$ifdef TESTPRG90
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!===================================================================================================================================
$BLOCK HELP -file xauth_key.1m_random.man
NAME
   xauth_key(1f) - [M_random] generate magic cookies for xauth
   (LICENSE:PD)
SYNOPSIS
   xauth_key [characters] [ -n number_of_characters]
DESCRIPTION
   xauth_key generates a random hexadecimal number 
OPTIONS
   characters  Set of letters to compose string from.
               Defaults to '0123456789abcdef'.
   -n N        Number of digits. Defaults to 128
   -r N        Number of cookies to generate
   --version   Display version information and exit.
   --help      Display help text and exit.
EXAMPLE
   generate a value for use with the X authority system:

    xauth add :0 . `xauth_key`
SEE ALSO
   X(1), xauth(1)
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
program xauth_key
use M_kracken, only : kracken, lget, iget, sget
use M_random, only  : init_random_seed_by_dat
use M_random, only  : random_string, random_hex
implicit none
intrinsic random_number
integer :: length
character(len=:),allocatable :: out
character(len=:),allocatable :: chars
integer                      :: i
integer                      :: r
   call kracken('key','-n 128 -r 1 -help .false. -version .false.') ! define command arguments, default values; crack command line
   call help_usage(lget('key_help'))                           ! if -help option is present, display help text and exit
   call help_version(lget('key_version'))                      ! if -version option is present, display version text and exit
   length=iget('key_n')
   r=iget('key_r')
   chars=trim(sget('key_oo'))
   if(chars.eq.'')then
      chars='0123456789abcdef'
   endif

   call init_random_seed_by_dat()
   do i=1,r
      out=random_string(chars,length)
      write(*,'(a)')out
   enddo
!-----------------------------------------------------------------------------------------------------------------------------------
contains
!-----------------------------------------------------------------------------------------------------------------------------------
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        xauth_key(1)
DESCRIPTION:    generate random strings such as magic cookies for xauth
VERSION:        1.0, 20171219
AUTHOR:         John S. Urban
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
end program xauth_key
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!===================================================================================================================================
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$ifdef PREP_TEST
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================

   This begins the section that will be processed by prep. Typically it is called by

      prep -system -i FILENAME

   if $SYSTEM commands are trusted

 UNIT TEST OF xauth_key

$SYSTEM goodbad xauth_key start -section 1

        Execute program

$SYSTEM xauth_key
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
$ENDIF
